#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <AccelStepper.h>
#define HALFSTEP 8  //Half-step Motor mode (8 step control signal sequence)

// Motor pin definitions
#define mtrPin1  D5     // IN1 on the ULN2003 driver 1
#define mtrPin2  D6     // IN2 on the ULN2003 driver 1
#define mtrPin3  D7     // IN3 on the ULN2003 driver 1
#define mtrPin4  D8     // IN4 on the ULN2003 driver 1

WiFiClient espClient;
PubSubClient client(espClient);
AccelStepper stepper1(HALFSTEP, mtrPin1, mtrPin3, mtrPin2, mtrPin4);

const char* ssid = "Umbrella";
const char* password =  "Umbrella.222.Wifi.Haslo";
const char* mqttServer = "192.168.10.12";
const int   mqttPort = 1883;
const char* mqttUser = "openhabian";
const char* mqttPassword = "jajko22";

int mqttIn = 101;              //Mqtt Subsrcibe Open = 0, Close = 100  %

byte posMotorMin = 0;         
int posMotorMax = 2000;     
int posMotorNew = 0;    
int posMotorMove = 0;      
                             



////////////////////////////////// Setup Section ////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void setup() {

  Serial.begin(9600);

  ////////////////////////// Motor Settings Section //////////////////////////////////
  
  stepper1.setMaxSpeed(300.0);
  stepper1.setAcceleration(100.0);  //Make the acc quick
  stepper1.setSpeed(200);
  stepper1.moveTo(posMotorMove); 

  //////////////////////////  Wifi Settings Section  /////////////////////////////////
  
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println("Connected to the WiFi network");

  //////////////////////////  Mqtt Settings Section  /////////////////////////////////
  
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);

  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");

    if (client.connect("ESP8266Client", mqttUser, mqttPassword )) {

      Serial.println("connected");

    } else {

      Serial.print("failed with state ");
      Serial.print(client.state());
      delay(2000);

    }
  }
  client.subscribe("cmnd/roletaSalon/POWER");
  Serial.println(mqttIn);
  delay(1000);
  
}
/////////////////////////////////    End Setup Section   ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////// Reading Data from Mqtt Topic ///////////////////////
void callback(char* topic, byte* payload, unsigned int length) {

  Serial.print("Message arrived in topic: ");
  Serial.println(topic);

  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);            // Serial Print Mqtt Command
  }
  Serial.println();
  Serial.println("-----------------------");
  payload[length] = '\0';                      // Make payload a string by NULL terminating it.
  mqttIn = atoi((char *)payload);              // Data from Mqtt Topic to Global Variable mqttIn
}

/////////////////////////////////    Main Loop Section   ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
void loop() {
  
  client.loop();
  posMotorNew = map(mqttIn, 0, 100, 0, posMotorMax);


  
  if(mqttIn < 101){
 
    
  stepper1.moveTo(posMotorNew);
  stepper1.run();  
  }



  // Shutdown motor 
  if (stepper1.distanceToGo() == 0)
  {
  digitalWrite(mtrPin1,LOW);
  digitalWrite(mtrPin2,LOW);
  digitalWrite(mtrPin3,LOW);
  digitalWrite(mtrPin4,LOW);
  } 
}
/////////////////////////////////    End Main Loop Section   ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
