// Group groupname ["labeltext"] [<iconname>] [(group1, group2, ...)]

Group Strzecha "Nasza Chatka"   <house>


Group Salon               "Salon"                                                <sofa>               (Strzecha)
Group Korytarz            "Koryatrz"                                             <corridor>           (Strzecha)
Group Kuchnia             "Kuchnia"                                              <kitchen>            (Strzecha)
Group Biuro               "Biuro"                                                <office>             (Strzecha)
Group Toaleta             "Toaleta"                                              <toilet>             (Strzecha)
Group Lazienka            "Łazienka"                                             <bath>               (Strzecha)
Group Sypialnia           "Sypialnia"                                            <bedroom>            (Strzecha)
Group Hol                 "Hol"                                                  <corridor>           (Strzecha)
Group Balkon              "Balkon"                                               <terrace>            (Strzecha)
Group Spizarnia           "Spiżarnia"                                            <wardrobe>           (Strzecha)
Group Garderoba           "Garderoba"                                            <wardrobe>           (Strzecha)

Group Zewnatrz            "Na zewnątrz"                                          <none>               (Strzecha)
Group Piwnica             "Piwnica"                                              <cellar>             (Zewnatrz)
Group Garaz               "Garaż"                                                <garage>             (Zewnatrz)

Group Serwerownia         "Serwerownia"                                          <energy>             (Strzecha)
Group Elektryka           "Elektryka"                                            <energy>             (Serwerownia)
Group RSSI_Group          "Wifi range"                                           <network>            (Serwerownia)
//Group Astro               "Astro"                                                <sun>                (Serwerownia)
Group Server              "Serwery"                                              <network>            (Serwerownia)

Group Security            "Security"                                             <alarm>              (Strzecha)
Group AirSensor           "Air temperature, humidity and quality sensors"        <flow>               (Security)
Group FireSensor          "Fire Detection"                                       <fire>               (Security)
Group WaterSensor         "Kitchen, Toilet, Bathroom water sensor"               <water>              (Security)
Group MagneticSensor      "Door, Window, Fridge Sensor"                          <flow>               (Security)
Group Camera              "All Cameras"                                          <camera>             (Security)
Group MiotionSensor       "All Motion Detection Devices"                         <motion>             (Security)

Group Multimedia          "TV, Chromecast, Music Player"                         <none>               (Strzecha)
Group Telefon            "Telefony"                                              <screen>             (Multimedia)
Group Telewizor           "All TV`s"                                             <screen>             (Multimedia)
Group Music               "All Music PLayer"                                     <receiver>           (Multimedia)
Group Chromecast          "Chromecast"                                           <mediacontrol>       (Multimedia)



Group Light               "Light [(%d)]"                                         <light>              (Strzecha)
Group EveningLighting     "Lightning after Sunset"                               <light>              (Light)


Group Sonoff              "All Sonoff Devices"                                   <light>              (Strzecha)
















/*             ///////////////////////////   docs.openHAB.org   ////////////////////////////



Groups
The Group is a special Item type that can be used to define a category or collection into which you can combine other Items or Groups. An Item may be put into one or more groups, and groups may be nested inside other groups. The general syntax for Group Items is as follows:

Group groupname ["labeltext"] [<iconname>] [(group1, group2, ...)]
The Group item is commonly used to define hierarchies of Items from different perspectives. For example:

Location-oriented or physical perspective:

Floors in your house → Rooms on that floor → An appliance in that room...
Functional or logical perspective:

Maintenance Group → All battery states → Individual battery states in percentage
Further examples: all lights, all room temperatures, combined power consumption
These relationships can be exploited in Sitemaps or in automation rules to navigate through the hierarchically organized Items or to perform computations and updates on subsets of similar Items.

Example:

// Overarching group
Group House
// Location perspective
Group GroundFloor  (House)
Group Livingroom   (GroundFloor)
// Functional perspective
Group Sensors      (House)
Group Temperatures (Sensors)

// Example Item
Number Livingroom_Temperature "Temperature [%.1f °C]" (Livingroom, Temperatures)
The example shows an Item which stores the temperature of the living room called Livingroom_Temperature.

From a location perspective, you may have a group called Livingroom. When you add Livingroom_Temperature to the Livingroom group, Livingroom_Temperature is automatically part of the GroundFloor and House groups. This is because Livingroom is a member of the GroundFloor group, and GroundFloor is a member of the House group.

From a functional perspective, the Living room temperature can also be seen as one of many temperatures in the automation setup. Therefore the addition of Livingroom_Temperature to a functional group called Temperatures, which itself belongs to the Sensors group, seems reasonable.

Using nested group hierarchies such as these allows a rule to iterate through all sensors on the ground floor for maintenance actions, for example. Because of the hierarchical structure of your group items, the rule will be clean and short. Additionally, the rule will not need to be modified when a new Item is added to the Temperatures group.

# Group Type and State
As you are now aware, an Item can have a state (e.g. "ON", "OFF"). A Group Item can also have a state. The Group's state is determined by the state of all its Items, and the aggregation function specified in the group definition.

The general syntax for groups with a specific item type and aggregation function is:

Group[:itemtype[:function]] groupname ["labeltext"] [<iconname>] [(group1, group2, ...)]
If the aggregation function is omitted, the function EQUALITY will be used.
If the aggregation function and itemtype are omitted, no group state will be aggregated from member Items.
Group state aggregation functions can be any of the following:

Function	Description
EQUALITY	Default if no function is specified. If ALL members have state X the group state will be X, otherwise the group state will be UNDEF.
AND(value1,value2)	Boolean AND operation. If all item states are 'value1', 'value1' is returned, otherwise 'value2' is returned.
OR(value1,value2)	Boolean OR operation. If at least one item state is of 'value1', 'value1' is returned, otherwise 'value2' is returned.
NAND(value1,value2)	Boolean NAND (not AND) operation. Returns the opposite of the AND operation.
NOR(value1,value2)	Boolean NOR (not OR) operation. Returns the opposite of the OR operation.
AVG	Calculates the numeric average over all Item states of decimal type.
MAX	Calculates the maximum value of all Item states of decimal type.
MIN	Calculates the minimum value of all Item states of decimal type.
SUM	Calculates the sum of all Item states in the Group.
Boolean group state functions additionally return a number representing the count of member Items of value 'value1' (see example below).

Because the group state is an aggregation of multiple Item states, not every Item state change results in a change of the group state.

Note that aggregation functions can only be used on compatible Item types. Incompatible Item types within a Group may result in the invalid aggregation result UNDEF.

Examples:

Group:Number             Lights       "Active Lights [%d]"              // e.g. "2"
Group:Switch:OR(ON,OFF)  Lights       "Active Lights [%d]"              // e.g. ON and "2"
Group:Number:AVG         Temperatures "All Room Temperatures [%.1f °C]" // e.g. "21.3 °C"
The first two examples above compute the number of active lights and store them as group state. However, the second group is of type switch and has an aggregation function of OR. This means that the state of the group will be ON as soon as any of the member lights are turned on.

Groups do not only aggregate information from individual member Items, they can also accept commands. Sending a command to a Group causes the command to be sent to all Group members. An example of this is shown by the second group above; sending a single ON or OFF command to that group turns all lights in the group on or off.

The third example computes the average temperature of all room temperature Items in the group.



*/             ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
