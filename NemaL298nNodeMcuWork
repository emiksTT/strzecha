#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <AccelStepper.h>
#define MotorInterfaceType 8

WiFiClient espClient;
PubSubClient client(espClient);
AccelStepper stepper = AccelStepper(MotorInterfaceType, D5, D6, D7, D8);

const char* ssid = "Umbrella";
const char* password =  "Umbrella.222.Wifi.Haslo";
const char* mqttServer = "192.168.10.12";
const int   mqttPort = 1883;
const char* mqttUser = "openhabian";
const char* mqttPassword = "jajko22";

int mqttIn;                  // Data from Mqtt Broker in terms 0-100%, 0=open 100=close

int posMotorMin = 0;         // Minimal position, internal blind = Open
int posMotorMax = 3000;      // Maximal position, internal blind = Close
int posMotorMove;            // New position stepper motor to go





////////////////////////////////// Setup Section ////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////


void setup() {


  Serial.begin(9600);

  ////////////////////////// Motor Settings Section //////////////////////////////////
  stepper.setMaxSpeed(150);
  stepper.setAcceleration(50);
  stepper.setSpeed(100);

  //////////////////////////  Wifi Settings Section  /////////////////////////////////

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println("Connected to the WiFi network");

  //////////////////////////  Mqtt Settings Section  /////////////////////////////////

  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);

  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");

    if (client.connect("ESP8266Client", mqttUser, mqttPassword )) {

      Serial.println("connected");

    } else {

      Serial.print("failed with state ");
      Serial.print(client.state());
      delay(2000);

    }
  }
  client.subscribe("cmnd/roletaSalon/POWER");
  Serial.println(mqttIn);
  delay(1000);

}
/////////////////////////////////    End Setup Section   ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////// Reading Data from Mqtt Topic ///////////////////////
void callback(char* topic, byte* payload, unsigned int length) {

  Serial.print("Message arrived in topic: ");
  Serial.println(topic);

  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);            // Serial Print Mqtt Command
  }
  Serial.println();
  Serial.println("-----------------------");
  payload[length] = '\0';                      // Make payload a string by NULL terminating it.
  mqttIn = atoi((char *)payload);              // Data from Mqtt Topic to Global Variable mqttIn
}

/////////////////////////////////    Main Loop Section   ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void loop() {

  client.loop();  // Mqtt
  posMotorMove = map(mqttIn, 0, 100, 0, posMotorMax);

  stepper.moveTo(posMotorMove);
  stepper.run();
  //stepper.runSpeed();

  // Shutdown motor when new position ready
  if (stepper.distanceToGo() == 0)
  {
    digitalWrite(D5, LOW);
    digitalWrite(D6, LOW);
    digitalWrite(D7, LOW);
    digitalWrite(D8, LOW);
  }
}
